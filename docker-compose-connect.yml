version: '3'
services:
  # As keyspaces and tables should already exist we need to start the applications first.
  kafka-connect:
    image: confluentinc/cp-kafka-connect:5.1.0
    #depends_on:
    #  - zookeeper
    #  - kafka
    ports:
      - 18083:18083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 18083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars,/connectors,/tmp/dse-kafka-connect/jars'
    volumes:
      - $PWD/kafka-dse-sink:/tmp/dse-kafka-connect/jars
    command: 
      - bash 
      - -c 
      - |
        /etc/confluent/docker/run & 
        echo "Waiting for Kafka Connect to start listening on $$CONNECT_REST_ADVERTISED_HOST_NAME ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors) -eq 000 ] ; do 
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors) " (waiting for 200)"
          sleep 5 
        done
        nc -vz $$CONNECT_REST_ADVERTISED_HOST_NAME $$CONNECT_REST_PORT
        echo -e "\n--\n+> Creating Kafka Connect DataStax Sink"
        curl -s \
             -X "POST" "http://localhost:18083/connectors/" \
             -H "Content-Type: application/json" \
             -d '{
            "name": "dse_stock_ticks",
            "config": {
                "connector.class": "com.datastax.kafkaconnector.DseSinkConnector",
                "tasks.max": "1",
                "topics": "stocks_ticks",
                "contactPoints": "dse",
                "loadBalancing.localDc": "DC1",
                "port": 9042,
                "maxConcurrentRequests": 500,
                "maxNumberOfRecordsInBatch": 32,
                "queryExecutionTimeout": 30,
                "connectionPoolLocalSize": 4,
                "jmx": false,
                "compression": "None",
                "auth.provider": "None",
                "auth.username": "",
                "auth.password": "",
                "auth.gssapi.keyTab": "",
                "auth.gssapi.principal": "",
                "auth.gssapi.service": "dse",
                "ssl.provider": "None",
                "ssl.hostnameValidation": true,
                "ssl.keystore.password": "",
                "ssl.keystore.path": "",
                "ssl.openssl.keyCertChain": "",
                "ssl.openssl.privateKey": "",
                "ssl.truststore.password": "",
                "ssl.truststore.path": "",
                "ssl.cipherSuites": "",
                "topic.stocks_ticks.demo_kafka.stocks_ticks.mapping": "symbol=value.symbol, value=value.value, value_date=value.valueDate",
                "topic.stocks_ticks.demo_kafka.stocks_ticks.consistencyLevel": "LOCAL_ONE",
                "topic.stocks_ticks.demo_kafka.stocks_ticks.ttl": -1,
                "topic.stocks_ticks.demo_kafka.stocks_ticks.nullToUnset": "true",
                "topic.stocks_ticks.demo_kafka.stocks_ticks.deletesEnabled": "true",
                "topic.stocks_ticks.codec.locale": "en_US",
                "topic.stocks_ticks.codec.timeZone": "UTC",
                "topic.stocks_ticks.codec.timestamp": "CQL_TIMESTAMP",
                "topic.stocks_ticks.codec.date": "ISO_LOCAL_DATE",
                "topic.stocks_ticks.codec.time": "ISO_LOCAL_TIME",
                "topic.stocks_ticks.codec.unit": "MILLISECONDS"
            }
        }'
        sleep infinity
        